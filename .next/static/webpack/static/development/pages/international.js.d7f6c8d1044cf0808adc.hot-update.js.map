{"version":3,"file":"static/webpack/static/development/pages/international.js.d7f6c8d1044cf0808adc.hot-update.js","sources":["webpack:///./components/review-chart.js","webpack:///./pages/international.js"],"sourcesContent":["import { Bar } from 'react-chartjs-2';\n\nconst options = {\n  datasetFill: true,\n  legend: {\n    display: false\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\",\n      },\n      ticks: {\n        stepSize: 50\n      }\n    }],\n    yAxes: [{\n      ticks: {\n        beginAtZero: true, callback: function (value, index, values) {\n          return value + \"%\";\n        },\n        stepSize: 2\n      },\n    }]\n  }\n}\n\nexport default class ReviewChart extends React.Component {\n\n  chartData = (props) => {\n    this.data.labels = Object.keys(props.evolution).map(key => { return key })\n  \n    this.data.datasets[0].data = Object.keys(props.evolution).map(key => {\n      return props.evolution[key][props.year]['value']\n    })\n  \n    const colors = orderColors(this.data.labels, this.selectedColors)\n  \n    this.data.datasets[0].backgroundColor = colors\n    this.data.datasets[0].borderColor = colors\n  }\n\n  constructor(props) {\n    console.log(props);\n    super(props);\n    this.data = {\n      labels:'',\n      datasets: [\n        {\n          label: 'Reviews',\n          borderWidth: 1,\n        }\n      ]\n    }\n    this.selectedColors = props.colors\n    this.chartData(props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.chartData(nextProps);\n  }\n\n  render() {\n    // this\n    // Object.keys(this.props.evolution).forEach((key, i) => {\n    //   // console.log(this.props.evolution[key][this.props.year])\n    //   // console.log(i, this.props.evolution[key])\n    //   // if(i == 1) return props.evolution[year]['Ingoing']\n    // });\n    return (\n      <div>\n        <Bar\n          data={this.data}\n          width={100}\n          height={20}\n          options={options}\n        />\n      </div>\n    )\n  }\n\n}\n\nfunction orderColors(names, selectedColors) {\n  var array = [];\n  for (var i = 0; i < names.length; i++) {\n    array.push(selectedColors[names[i]]);\n  };\n  return array;\n}\n","import Head from '../components/head'\nimport axios from 'axios'\nimport ReviewChart from '../components/review-chart'\nimport DiffTable from '../components/diff-table';\nimport MonthChart from '../components/month-chart';\nimport Menu from '../components/menu';\nimport Select from 'react-select';\nimport NProgress from 'nprogress'\nimport { Navbar, Nav, NavItem } from 'reactstrap';\nimport Link from 'next/link'\nimport { internationalSelectedColors } from '../utils/colors'\n\nexport default class International extends React.Component {\n  topYear = [\n    { value: 2014, label: '2014' },\n    { value: 2015, label: '2015' },\n    { value: 2016, label: '2016' }\n  ]\n  \n  state = {\n    selectedYear: { value: this.props.year, label: this.props.year },\n    data: this.props.data,\n    info: {\n      topCountries: this.props.info.topCountries.map(el => {\n        return { value: el, label: el }\n      }),\n      topAges: this.props.info.topAges.map(el => {\n        return { value: el, label: el }\n      })\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleYearChange = this.handleYearChange.bind(this);\n    this.selected = JSON.parse(JSON.stringify(this.state.info));\n  }\n\n  static async getInitialProps({ req }) {\n    const year = Number(req.params.year) || 2016\n    const response = await axios.get(`http://localhost:3000/BM/international/${year}/?countries=Belgium,France`);\n    const info = await axios.get(`http://localhost:3000/BM/international/${year}/info/?limit=10`)\n\n    return {\n      data: response.data,\n      info: info.data,\n      year: year\n    }\n  }\n\n  axiosProgress = (url) => {\n    console.log('%c' + url, 'color: blue');;\n    NProgress.start();\n    return axios.get(url)\n      .then(res => {\n        return res;\n      })\n  }\n\n  handleYearChange = async (selectedYear) => {\n    const res = await this.axiosProgress(`http://localhost:3000/BM/international/${selectedYear.value}/`)\n    const info = await axios.get(`http://localhost:3000/BM/international/${selectedYear.value}/info`)\n    this.setState({\n      data: res.data,\n      selectedYear,\n      info: {\n        topCountries: info.data.topCountries.map(el => {\n          return { value: el, label: el }\n        }),\n        topAges: info.data.topAges.map(el => {\n          return { value: el, label: el }\n        })\n      }\n    });\n    this.selected = JSON.parse(JSON.stringify(this.state.info));\n    NProgress.done();\n  }\n\n  handleCountriesChange = async (newValue, actionMeta) => {\n    this.selected.topCountries = newValue\n  }\n\n  handleRegionsChange = async (newValue, actionMeta) => {\n    this.selected.topRegions = newValue\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const res = await this.axiosProgress(\n      `http://localhost:3000/BM/international/${this.state.selectedYear.value}/?countries=${this.selected.topCountries.map(el => el.value).join()}&regions=${this.selected.topRegions.map(el => el.value).join()}`\n    )\n    this.setState({ data: res.data });\n    NProgress.done();\n  }\n\n  render() {\n    const { selectedYear } = this.state;\n    return (\n      <div className=\"col\">\n        <div className=\"row\">\n          <div className=\"col-md-11\">\n            <Nav className=\"justify-content-center\"> \n              {this.topYear.map(({ value, label }) => (\n                <NavItem key={`nav-navitem-${label}`}>\n                  <Link key={`nav-navitem-link${label}`} href={`/${value}`}><a className=\"nav-link\">{label} </a></Link>\n                </NavItem>\n              ))}\n            </Nav>\n          </div>\n        </div>\n        <Menu>\n          <form onSubmit={this.handleSubmit.bind(this)}>\n            <div className=\"form-group row\">\n              <label className=\"col-md-1 col-form-label\">Countries</label>\n              <div className=\"col-md-11\">\n                <Select\n                  key={JSON.stringify(this.state.info.topCountries)}\n                  defaultValue={this.state.info.topCountries}\n                  isSearchable isClearable isMulti\n                  name=\"countries\"\n                  closeMenuOnSelect={false}\n                  options={this.state.info.topCountries}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                  placeholder=\"Select..\"\n                  onChange={this.handleCountriesChange}\n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              {/* <label className=\"col-md-1 col-form-label ml-auto\">Year</label>\n              <div className=\"col-md-2 \">\n                <Select value={selectedYear} onChange={this.handleYearChange} options={this.topYear} />\n              </div> */}\n              <label className=\"col-md-1 col-form-label  ml-auto\">Ages</label>\n              <div className=\"col-md-2\">\n                <Select\n                  key={JSON.stringify(this.state.info.topAges)}\n                  defaultValue={[this.state.info.topAges[0]]}\n                  isClearable name=\"ages\"\n                  options={this.state.info.topAges}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                />\n              </div>\n              <div className=\"col-auto\">\n                <button type=\"submit\" className=\"btn btn-outline-primary\">Update</button>\n              </div>\n            </div>\n\n          </form>\n        </Menu>\n\n        <Head title=\"International\" />\n        <h1>Internationadl</h1>\n        <ReviewChart evolution={this.state.data['Evolution']} year={this.state.selectedYear['value']} colors={internationalSelectedColors}/>\n\n        <DiffTable evolution={this.state.data['Evolution']} year={this.state.selectedYear['value']} var='value' />\n\n        {/* <div className=\"row\">\n          <div className=\"col-md-6\"> */}\n            <MonthChart evolution={this.state.data['Monthly']} var='Reviews' colors={internationalSelectedColors}/>\n          {/* </div> */}\n          {/* <div className=\"col-md-6\"> */}\n          {/* </div> */}\n        {/* </div> */}\n      </div>\n    )\n  }\n\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AADA;AATA;AALA;AACA;AAwBA;;;;;AAeA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAZA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AASA;AACA;AAAA;AACA;AAdA;AAcA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAQA;;;;AApDA;AACA;AADA;AACA;AAuDA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAoBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAlBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAeA;AAZA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAHA;AACA;AAYA;AAmBA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAHA;AACA;AAWA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA/CA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkDA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnDA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAJA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAIA;AACA;;;AA0DA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AAAA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;;;;;;;;;;;;AAlIA;AACA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;;;;;AAhCA;AACA;;;;;A","sourceRoot":""}